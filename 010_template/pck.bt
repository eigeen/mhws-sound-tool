LittleEndian();

struct PCKStringEntry {
    uint32 offset;
    uint32 index;
};

local char magic[4];
magic = ReadString(FTell(), 4);
if (magic != "AKPK") {
    Warning("Not a pck file!");
    return -1;
}
FSeek(4);

struct PCKHeader {
    uint32 headerSize;
    uint32 version;
    uint32 languageSize;
    uint32 bnkTableSize;
    uint32 wemTableSize;
    uint32 externalTableSize;
    
    local const uint64 startPos = FTell();
    uint32 stringCount;
    if (stringCount > 0) {
        PCKStringEntry stringEntries[stringCount];
        local int i = 0;
        for (i = 0; i < stringCount; i++) {
            FSeek(startPos + stringEntries[i].offset);
            struct PCKString {
                wstring str;
            } pckString <optimize=false>;
        }
    }
    FSeek(startPos + languageSize);
    
    uint32 bnkCount;
    if (bnkCount > 0){
        struct BnkEntry {
             uint32 id;
             uint32 blockSize;
             uint32 length;
             uint32 offset;
             uint32 languageEnum; 
        } bnkTable[bnkCount] <comment="Table metadata BNK-files">;
    }

    uint32 wemCount;
    if (wemCount > 0) {
        struct WemEntry {
            uint32 id;
            uint32 blockSize;
            uint32 length;
            uint32 offset;
            uint32 languageEnum;
        } wemEntry[wemCount] <comment="Table metadata WEM-files">;
    }

    uint32 externalCount;
    if (externalCount > 0) {
        struct ExternalEntry {
            uint32 id;
            uint32 blockSize;
            uint32 length;
            uint32 offset;
            uint32 languageEnum;
        } wemEntry[externalCount] <comment="Table metadata external audio files">;
    }
} pckHeader <comment="Main header">;

// read bnk files
if (pckHeader.bnkCount > 0) {
    struct BnkFilesData {
        struct BnkData_Entry(uint32 size) {
            byte data[size];
        };
        local int i;
        local uint64 currentPos;
        local uint32 alignment;
        local uint64 paddingBytes = 0;
        
        for (i = 0; i < pckHeader.bnkCount; i++) {
            
            currentPos = FTell();
            
            alignment = pckHeader.bnkTable[i].blockSize;
            if (alignment == 0) { 
                alignment = 1; 
            }

            if ((currentPos % alignment) != 0) {
                paddingBytes = alignment - (currentPos % alignment);
            }
            else {
                paddingBytes = 0;
            }
            
            FSeek(currentPos + paddingBytes);
            /*
            if (paddingBytes > 0) {
                struct PaddingBnk {
                    byte PADDING[paddingBytes];
                } padding;
            }
            */
            BnkData_Entry data(pckHeader.bnkTable[i].length);
            
        }
    } bnkFilesData<comment="BNK data">;
}

// read wem files
if (pckHeader.wemCount > 0) {
    struct WemFilesData {
        
        struct WemData_Entry (uint32 size) {
            byte data[size];
        };
        
        local int i;
        local uint64 currentPos = 0;
        local uint32 alignment = 0;
        local uint64 paddingBytes = 0;
        
        for (i = 0; i < pckHeader.wemCount; i++) {
            
            currentPos = FTell();
            
            alignment = pckHeader.wemEntry[i].blockSize;
            if (alignment == 0) { 
                alignment = 1; 
            }

            if ((currentPos % alignment) != 0) {
                paddingBytes = alignment - (currentPos % alignment);
            }
            else {
                paddingBytes = 0;
            }
            FSeek(currentPos + paddingBytes);
            /*
            if (paddingBytes > 0) {
                struct PaddingWem {
                    byte PADDING[paddingBytes];
                } padding;
            }
            */
            WemData_Entry data(pckHeader.wemEntry[i].length);
           
        }
    } wemFilesData<comment="WEM data">;
}